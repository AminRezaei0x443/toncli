#!/usr/bin/fift -s
"TonUtil.fif" include
"Asm.fif" include
"Color.fif" include

// todo: use GetOpt.fif
// define usage comment
{ ."usage: " $0 type ." code-path data-path workchain [lib-path]" cr
."Generate init message and and calculate wallet address" cr 1 halt } : usage

// if less then two arguments print usage message
$# 3 < ' usage if

// load at least 2 command line arguments
3 :$1..n

// load code path from command line
$1 constant code-path

// load lib path from command line, if no lib provided - set it to null
$2 constant data-path
$3 parse-workchain-id =: wc

// It's trick from https://t.me/tonsc_chat/949
<{ SETCP0 ACCEPT
   code-path include PUSHREF SETCODE
}>c constant code
data-path include constant data

// todo: add library support
// todo: rewrite with comments
// ok, it's hard to understand but samples are here:
// https://gist.github.com/tvorogme/fdb174ac0740b6a52d1dbdf85f4ddc63
<b b{0011} s, data ref, data ref, null dict, b> constant StateInit

StateInit hashu wc swap 2dup 2constant contract_addr
2dup "build/contract.addr" save-address-verbose

^magenta
2dup ."🦄 Raw address: " .addr cr

^green
2dup ."🦝 Bounceable address: " 6 .Addr cr

^yellow
."🐏 Non-bounceable address: " 7 .Addr cr

{ b{0} s, def? body { @' body s, } if } : body,

// todo: add possibility to send body as cell ref
<b b{1000100} s, contract_addr addr, b{000011} s, StateInit ref, body, b>
2 boc+>B
"build/boc/contract-create.boc" tuck B>file
